#!/usr/bin/env python
import argparse

from gitissuebot.main import get_issues, update_inactive_issues, remove_inactive_label

def arg_parse():
    parser = argparse.ArgumentParser(description="Parses all issues from a given \
                                     repo and flags issues based on activity level. \
                                     Ultimately removing issues that have been \
                                     inactive for > 1 year. See the update_inactive_issues \
                                     function for more details.")
    parser.add_argument('--no-update','-n', action="store_true", default=False, help='Prevents any kind of update to the \
                                                                                      repositories issues. Used for dry \
                                                                                      runs to test that all issues are \
                                                                                      being pulled correctly.')

    args = parser.parse_args()
    return args


if __name__ == "__main__":
    args = arg_parse()
    # Starts from the oldest issue and moves to the newest issue in the repo
    update_string = "Updating {} issues from '{}' to '{}'"
    gathered_string = "Collected {} issues from '{}' to '{}'"
    issues, cursor = get_issues(issue_filter = "states: OPEN, first:50")
    print(gathered_string.format(len(issues), issues[0]['title'], issues[-1]['title']))
    # Update issues
    if not args.no_update:
        print(update_string.format(len(issues), issues[0]['title'], issues[-1]['title']))
        update_inactive_issues(issues)

    while True:
        try:
            issues, cursor = get_issues(issue_filter = f'states: OPEN, first:50, after:"{cursor}"')
            print(gathered_string.format(len(issues), issues[0]['title'], issues[-1]['title']))
            # Update issues
            if not args.no_update:
                print(update_string.format(len(issues), issues[0]['title'], issues[-1]['title']))
                update_inactive_issues(issues)
        except IndexError as e:
            print("No more issues to parse, exiting.")
            break


    issues, cursor = get_issues(issue_filter = f'states: OPEN, first:50, labels:"inactive"')
    print(gathered_string.format(len(issues), issues[0]['title'], issues[-1]['title']))
    # Update issues
    if not args.no_update:
        print(update_string.format(len(issues), issues[0]['title'], issues[-1]['title']))
        remove_inactive_label(issues)

    while True:
        try:
            issues, cursor = get_issues(issue_filter = f'states: OPEN, first:50, labels:"inactive", after:"{cursor}"')
            print(gathered_string.format(len(issues), issues[0]['title'], issues[-1]['title']))
            # Update issues
            if not args.no_update:
                print(update_string.format(len(issues), issues[0]['title'], issues[-1]['title']))
                remove_inactive_label(issues)
        except IndexError as e:
            print("No more inactive issues to parse, exiting.")
            break
